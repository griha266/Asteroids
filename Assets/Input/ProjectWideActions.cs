//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/ProjectWideActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Asteroids.Input
{
    public partial class @ProjectWideActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ProjectWideActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ProjectWideActions"",
    ""maps"": [
        {
            ""name"": ""MainScreen"",
            ""id"": ""925eaa8d-ccdf-4501-b986-a09d5f665fa5"",
            ""actions"": [
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""3526eacf-8fac-4419-a75e-848ed44eec05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""517aa75a-51bf-4dcc-a4c2-819260783301"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cee873d9-d514-4bb6-b098-67f9f4d8e833"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bef349c-c213-456a-9851-b99f499e3b29"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01774073-01db-4171-b38d-86a86de937d0"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a2c43d9-8f3c-49d3-b84c-b6654d056778"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gameplay"",
            ""id"": ""3d21ec29-3dc1-4579-8e45-baeda3f50828"",
            ""actions"": [
                {
                    ""name"": ""FireCannon"",
                    ""type"": ""Button"",
                    ""id"": ""2b5ee4d5-a3bd-44f3-a679-a28645293abb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireLaser"",
                    ""type"": ""Button"",
                    ""id"": ""2833d313-70c2-4c08-bf2f-e3949229b2d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateAxis"",
                    ""type"": ""Value"",
                    ""id"": ""b084842e-2556-428d-a447-7002ed354439"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Value"",
                    ""id"": ""5a7d4c4c-0e1d-4c17-a339-6aa6221c29ef"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eaaf9ac1-b5a3-464e-964f-a72fecf7420a"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""978ab506-3a94-448d-be17-2b60f4025a15"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4ef9640-2393-4b38-a0db-08c58933ea9c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce478ccf-b576-4a55-bea9-b273d547ea5c"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireLaser"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c346316c-cc3f-41ca-a690-a35d7560839f"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireLaser"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94f2c245-4af5-4879-9edf-dfad22a4ee7e"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireLaser"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5721990-5317-4c4a-8f57-584c5f6c83f0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18b09db7-b012-4897-be15-1defcb25b655"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4cc8e9da-1c8d-491e-b24d-de2d7c0cfd7f"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""GamePadAxis"",
                    ""id"": ""c5dbb32a-1d53-4e8d-a05e-7349f07d425d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""5be61157-a864-457c-a4cb-450d831c60ca"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""40b824a2-8632-4420-856c-ca14ad25d0bd"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""KeyboardWASDAxis"",
                    ""id"": ""839a59ae-0b3a-4425-aca4-3c43a43d7670"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""70172f75-d4b5-4bc2-b343-43ff4a1a38a1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9ec6dd2e-488b-4e67-90ca-451c8ec34570"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""KeyboardArrowAxis"",
                    ""id"": ""b9dec070-5e66-4c39-aa78-8e147fa8c421"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""87d309c5-033e-4518-b741-87bb3488e58e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f170ec8d-5c49-4acc-ae90-76f5a53b51a3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // MainScreen
            m_MainScreen = asset.FindActionMap("MainScreen", throwIfNotFound: true);
            m_MainScreen_StartGame = m_MainScreen.FindAction("StartGame", throwIfNotFound: true);
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_FireCannon = m_Gameplay.FindAction("FireCannon", throwIfNotFound: true);
            m_Gameplay_FireLaser = m_Gameplay.FindAction("FireLaser", throwIfNotFound: true);
            m_Gameplay_RotateAxis = m_Gameplay.FindAction("RotateAxis", throwIfNotFound: true);
            m_Gameplay_MoveForward = m_Gameplay.FindAction("MoveForward", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MainScreen
        private readonly InputActionMap m_MainScreen;
        private List<IMainScreenActions> m_MainScreenActionsCallbackInterfaces = new List<IMainScreenActions>();
        private readonly InputAction m_MainScreen_StartGame;
        public struct MainScreenActions
        {
            private @ProjectWideActions m_Wrapper;
            public MainScreenActions(@ProjectWideActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @StartGame => m_Wrapper.m_MainScreen_StartGame;
            public InputActionMap Get() { return m_Wrapper.m_MainScreen; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainScreenActions set) { return set.Get(); }
            public void AddCallbacks(IMainScreenActions instance)
            {
                if (instance == null || m_Wrapper.m_MainScreenActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MainScreenActionsCallbackInterfaces.Add(instance);
                @StartGame.started += instance.OnStartGame;
                @StartGame.performed += instance.OnStartGame;
                @StartGame.canceled += instance.OnStartGame;
            }

            private void UnregisterCallbacks(IMainScreenActions instance)
            {
                @StartGame.started -= instance.OnStartGame;
                @StartGame.performed -= instance.OnStartGame;
                @StartGame.canceled -= instance.OnStartGame;
            }

            public void RemoveCallbacks(IMainScreenActions instance)
            {
                if (m_Wrapper.m_MainScreenActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMainScreenActions instance)
            {
                foreach (var item in m_Wrapper.m_MainScreenActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MainScreenActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MainScreenActions @MainScreen => new MainScreenActions(this);

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
        private readonly InputAction m_Gameplay_FireCannon;
        private readonly InputAction m_Gameplay_FireLaser;
        private readonly InputAction m_Gameplay_RotateAxis;
        private readonly InputAction m_Gameplay_MoveForward;
        public struct GameplayActions
        {
            private @ProjectWideActions m_Wrapper;
            public GameplayActions(@ProjectWideActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @FireCannon => m_Wrapper.m_Gameplay_FireCannon;
            public InputAction @FireLaser => m_Wrapper.m_Gameplay_FireLaser;
            public InputAction @RotateAxis => m_Wrapper.m_Gameplay_RotateAxis;
            public InputAction @MoveForward => m_Wrapper.m_Gameplay_MoveForward;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void AddCallbacks(IGameplayActions instance)
            {
                if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
                @FireCannon.started += instance.OnFireCannon;
                @FireCannon.performed += instance.OnFireCannon;
                @FireCannon.canceled += instance.OnFireCannon;
                @FireLaser.started += instance.OnFireLaser;
                @FireLaser.performed += instance.OnFireLaser;
                @FireLaser.canceled += instance.OnFireLaser;
                @RotateAxis.started += instance.OnRotateAxis;
                @RotateAxis.performed += instance.OnRotateAxis;
                @RotateAxis.canceled += instance.OnRotateAxis;
                @MoveForward.started += instance.OnMoveForward;
                @MoveForward.performed += instance.OnMoveForward;
                @MoveForward.canceled += instance.OnMoveForward;
            }

            private void UnregisterCallbacks(IGameplayActions instance)
            {
                @FireCannon.started -= instance.OnFireCannon;
                @FireCannon.performed -= instance.OnFireCannon;
                @FireCannon.canceled -= instance.OnFireCannon;
                @FireLaser.started -= instance.OnFireLaser;
                @FireLaser.performed -= instance.OnFireLaser;
                @FireLaser.canceled -= instance.OnFireLaser;
                @RotateAxis.started -= instance.OnRotateAxis;
                @RotateAxis.performed -= instance.OnRotateAxis;
                @RotateAxis.canceled -= instance.OnRotateAxis;
                @MoveForward.started -= instance.OnMoveForward;
                @MoveForward.performed -= instance.OnMoveForward;
                @MoveForward.canceled -= instance.OnMoveForward;
            }

            public void RemoveCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameplayActions instance)
            {
                foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);
        public interface IMainScreenActions
        {
            void OnStartGame(InputAction.CallbackContext context);
        }
        public interface IGameplayActions
        {
            void OnFireCannon(InputAction.CallbackContext context);
            void OnFireLaser(InputAction.CallbackContext context);
            void OnRotateAxis(InputAction.CallbackContext context);
            void OnMoveForward(InputAction.CallbackContext context);
        }
    }
}
